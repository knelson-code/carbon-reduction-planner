# CO₂ Reduction Planner - Project Context for Cline

## 🌍 THE BIG PICTURE - WHO, WHY, AND VISION

### Who You Are
**Nelson** - CO₂ and climate change consultant, primarily assisting businesses with climate strategy and emissions management.

### The Mission
**Offering free, high-quality climate software to have real impact and showcase expertise.** This is both:
1. **Impact-driven:** Help businesses actually address climate change effectively
2. **Marketing/Positioning:** Demonstrate capabilities, build relationships, create consulting opportunities

### Why This Matters - The Problem with Existing Tools
Most climate tools in the market are:
- **Narrowly framed** - Focus on compliance/reporting, not actual change
- **Miss the point** - Don't address real theory of change for companies
- **Avoid key strategies** - Don't focus on target setting and transition strategy
- **Ineffective** - Don't help companies actually prepare for or fight climate change

**Your political/economic insight:** You understand what actually works vs. what just looks good on paper.

### The Solution - What We're Building
**A free, modular climate strategy platform** that focuses on:
- **Target Setting** - Meaningful goals, not just checking boxes
- **Transition Strategy** - Real pathways to change
- **Climate Risk** - Actual risk assessment and preparation
- **CO₂ Management** - Comprehensive emissions tracking and reduction planning

### Maximum Security & Privacy Approach
**Two-layer access system:**
1. **Request Access:** Users provide email → You manually send them the private URL
2. **Anonymous Login:** They create username/password with NO email required
   - Data is never tied to their company
   - Complete anonymity after gaining access
   - Even you don't know which company uses which account

**Why this matters:** Businesses can explore honestly without fear of data leakage or association.

### Modular Architecture Vision
**Multiple interconnected modules (planned):**
- 🎯 **CO₂ Management Module** (current focus) - Emissions tracking, Scope 1/2/3, reduction tactics
- ⚠️ **Climate Risk Module** (future) - Risk assessment and adaptation planning  
- 🚀 **Transition Strategy Module** (future) - Long-term decarbonization pathways
- 🔗 **Cross-module integration** - Same username across all modules, shared data where relevant

### User Journey
1. **Discovery:** Find on your website (newdayclimate.com)
2. **Request Access:** Submit email via form on Squarespace
3. **Receive Access:** You manually send private URL to login page
4. **Anonymous Registration:** Create username/password (no email, no company name required)
5. **Use the Tools:** Access all modules, input data anonymously
6. **Build Trust:** Experience quality → potential consulting relationship

### Where You're Coming From - Technical Background
- **Previous experience:** HTML/CSS code blocks in Squarespace via Claude
- **Current learning:** Full-stack development (frontend, backend, database, APIs, GitHub, Vercel)
- **Approach:** Experimenting to discover what's achievable
- **Philosophy:** Starting simple, building complexity as understanding grows

### Core Requirements - What Success Looks Like
**Visual** - Clean, professional design that looks impressive
**Simple** - Easy to use, intuitive, doesn't overwhelm users  
**Awesome** - Showcases your technical capabilities and strategic thinking
**Free** - No barriers to entry, maximum impact and reach
**Secure** - Absolute privacy and anonymity for users

### Strategic Goals
1. **Have real impact** on climate change by providing effective tools
2. **Demonstrate expertise** through quality software and design
3. **Build relationships** with users who may become consulting clients
4. **Create marketing asset** for promotion on website and LinkedIn
5. **Learn and experiment** with full-stack development
6. **Differentiate from market** by focusing on what actually works

---

## 🎯 PROJECT OVERVIEW (Technical)

**What we're building:** A climate management platform focused on producing systemic social and economic change through political engagement and targeted intervention. This is NOT typical emissions compliance software - it helps organizations understand leverage points in the political/economic system where they can have disproportionate impact on climate action.

**Target users:** Organizations seeking to make real systemic change on climate, not just track emissions for compliance

**Key differentiator:** 
- Privacy-first approach - username-only authentication (no email required)
- Focus on systemic change vs. emissions accounting
- Authentic theory of change vs. greenwashing boilerplate
- Political/economic intervention over incremental improvements

---

## 🏗️ TECHNICAL ARCHITECTURE

### Stack
- **Frontend:** Next.js 15 (App Router), React 19, TypeScript
- **Styling:** Tailwind CSS
- **Database:** PostgreSQL (Neon) via Prisma ORM
- **Authentication:** NextAuth.js with username/password (no OAuth)
- **Hosting:** Vercel (production: https://risk-software.newdayclimate.com)
- **Version Control:** GitHub (repo: knelson-code/carbon-reduction-planner)

### Key Technical Decisions
1. **Username-only auth** (no email) for maximum privacy
2. **PostgreSQL** instead of SQLite (Vercel doesn't support file-based DBs)
3. **Anonymous organization names** (users can name orgs anything)
4. **Manual password recovery** via support email (no automated reset)
5. **Server-side rendering** where possible for performance

---

## 📁 PROJECT STRUCTURE

```
carbon-reduction-planner/
├── app/                          # Next.js App Router pages
│   ├── page.tsx                 # Homepage (landing page)
│   ├── layout.tsx               # Root layout (includes Header/Footer)
│   ├── globals.css              # Global styles & Tailwind
│   ├── login/page.tsx           # Login page
│   ├── register/page.tsx        # Registration page
│   ├── dashboard/
│   │   ├── page.tsx            # Main dashboard (4 module cards)
│   │   ├── climate-risk/
│   │   │   └── page.tsx        # Climate Risk module page
│   │   ├── transition-strategy/
│   │   │   └── page.tsx        # Energy Transition Strategy module page
│   │   ├── impact-strategy/
│   │   │   └── page.tsx        # Systemic Impact module page
│   │   └── co2-management/
│   │       └── page.tsx        # CO₂ Management module page
│   ├── organizations/           # Organization management
│   ├── privacy/page.tsx         # Privacy policy
│   ├── terms/page.tsx           # Terms of service
│   └── support/page.tsx         # Support & password recovery info
├── components/
│   ├── Header.tsx               # Navigation bar (top)
│   ├── Footer.tsx               # Footer with legal links (bottom)
│   ├── Sidebar.tsx              # Collapsible left sidebar navigation
│   └── Providers.tsx            # NextAuth SessionProvider wrapper
├── lib/
│   ├── auth.ts                  # NextAuth configuration
│   └── prisma.ts                # Prisma client singleton
├── prisma/
│   └── schema.prisma            # Database schema (User, Organization models)
└── Documentation/
    ├── DEPLOYMENT_GUIDE.md      # How to deploy changes
    ├── VERCEL_SETUP.md          # Database & environment setup
    ├── STYLE_GUIDELINES.md      # Design system & component rules
    ├── GIT_WORKFLOW.md          # Git basics for beginners
    └── .clinerules              # THIS FILE - Project context
```

---

## 🧩 MODULAR ARCHITECTURE (4 CLIMATE MODULES)

### Dashboard Structure
After login, users see a dashboard with 4 main modules (not organizations):

**1. Understanding Climate Risk**
- Identify and understand risks
- Improve decision-making under uncertainty
- Incorporate insights into processes

**2. Energy Transition Strategy**
- Understand your role in a world affected by climate change
- Determine what you can do to speed up the energy transition
- Decide what you are willing to do

**3. Systemic Impact**
- Build a clear vision of the specific change you are trying to produce
- Identify sensitive intervention points in the political/economic system
- Define the actions that are most likely to produce that impact

**4. CO₂ Management**
- Measure emissions
- Set reduction Targets
- Create detailed reduction plan

### Module Design System
All modules follow a consistent design pattern:

**Dashboard Cards:**
- Grey background (#f5f5f5)
- Dark blue border (#163E64, 1px)
- Orange-tinted shadow (rgba(255, 91, 53, 0.25))
- On hover: Dark navy background (#0B1F32), white text
- Fast 150ms transition
- Contains module title + 3 bullet points (text-xs)

**Module Pages:**
- Colored header bar at top (keeps module identity)
- 3 sub-cards underneath that match dashboard card style exactly
- Same hover behavior, same colors, same spacing
- Module Overview section at bottom with bullet points

**Sidebar Navigation:**
- Ultra-thin collapsed (24px) with vertical text
- Expands to 240px on hover
- Shows module names + expandable sub-items
- Sub-items match the 3 bullet points from dashboard

### Critical Design Philosophy
**NO boilerplate climate language.** This platform focuses on systemic change through political/economic intervention, not typical emissions compliance. Avoid language like:
- ❌ "Net-zero pathways"
- ❌ "Science-based targets"  
- ❌ "Decarbonization roadmaps"
- ❌ Generic sustainability jargon

Instead use authentic framing:
- ✅ "Understand your role"
- ✅ "Speed up the energy transition"
- ✅ "Identify intervention points"
- ✅ "Produce systemic change"

### Footer Philosophy
"Strategic tools for producing systemic social and economic change on climate through political engagement and targeted intervention in key leverage points."

---

## 🎨 DESIGN SYSTEM

### Colors (from STYLE_GUIDELINES.md)
- **Primary Navy:** #0B1F32 (main text, headings, buttons)
- **Accent Orange:** #FF6B35 (CTAs, highlights)
- **Light Gray:** #F8F9FA (backgrounds)
- **Medium Gray:** #6C757D (secondary text)
- **White:** #FFFFFF (cards, overlays)

### Typography
- **Headings:** Inter font, bold
- **Body:** Inter font, regular
- **Sizes:** Responsive (mobile-first)

### Component Patterns
- **Cards:** White background, subtle shadow, rounded corners
- **Buttons:** Primary (orange), Secondary (navy), consistent padding
- **Forms:** Clean, labeled inputs with validation
- **Spacing:** Consistent 4px grid system

### Critical Design Rules
1. **Always use #163E64 for main text/navy** (not black, not darker blue)
2. **Maintain accessibility** (WCAG AA contrast ratios)
3. **Mobile-first responsive** (test on small screens)
4. **Consistent spacing** (use Tailwind's spacing scale)

---

## 🔐 AUTHENTICATION & DATABASE

### Authentication Flow
1. User registers with **username + password** (no email)
2. Password hashed with bcrypt
3. NextAuth.js manages sessions (JWT tokens)
4. Protected routes redirect to /login if not authenticated
5. No password reset - users contact support@newdayclimate.com

### Database Schema (PostgreSQL)
```prisma
model User {
  id           String         @id @default(cuid())
  username     String         @unique
  password     String
  createdAt    DateTime       @default(now())
  organizations Organization[]
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}
```

### Environment Variables (Vercel)
- `DATABASE_URL` - Neon PostgreSQL connection string
- `NEXTAUTH_SECRET` - Random string for JWT encryption
- `NEXTAUTH_URL` - Production URL (https://risk-software.newdayclimate.com)

---

## 🚀 DEPLOYMENT WORKFLOW

### Standard Practice: Always Commit & Push Immediately
**"Vibe coding in prod"** - After making changes:
1. **Make changes locally** → Edit files in VS Code
2. **Test briefly** → Run `npm run dev` to verify it works
3. **Commit and push immediately** → Don't wait, deploy now
4. **Let Vercel handle it** → Auto-deploys in 1-2 minutes

**This is the standard workflow for ALL changes.** No extensive testing cycles, no long review processes. Make the change, push it live, iterate if needed.

### The Pipeline
1. **Local changes** → Edit files in VS Code
2. **Git commit** → Via VS Code Source Control or command line
3. **Git push** → Pushes to GitHub (main branch)
4. **Vercel auto-deploy** → Detects push, builds, deploys
5. **Live in 1-2 minutes** → Changes appear at production URL

### Critical Files for Deployment
- `package.json` - Dependencies, build scripts
- `next.config.ts` - Next.js configuration
- `prisma/schema.prisma` - Database schema
- `.env` (local only, not committed)

### Database Migrations
- Changes to `schema.prisma` require running `prisma db push` in production
- This is automatic in Vercel via build script

---

## 🖼️ IMAGE & MEDIA FILE HANDLING (CRITICAL BEST PRACTICE)

### The Problem We Discovered

**October 17, 2025** - Learned the hard way that inline SVGs cause severe file corruption issues when editing files with Cline's tools.

### Why Inline SVGs Cause File Corruption

**What happens:**
- Inline SVGs can be 5000+ characters of path data
- When using `replace_in_file` tool, SEARCH blocks must match exactly
- Large SEARCH blocks get truncated mid-operation
- Files become corrupted with incomplete/broken code
- Multiple recovery attempts needed

**Example of problematic code:**
```tsx
// ❌ BAD: Inline SVG (causes corruption)
<svg width="48" height="48" viewBox="0 0 60 60">
  <path d="m15.965 59.47a.5.5 0 0 1 -.263-.926..."/> {/* 5000+ more characters */}
</svg>
```

### The Solution: External Files in /public

**Store ALL images as separate files in `/public` folder:**

```tsx
// ✅ GOOD: External file reference
<img src="/folder-icon.svg" alt="Icon" width="48" height="48" />
```

### Why This Works Perfectly

**MP3s, PNGs, SVGs, etc. - All use the same pattern:**

1. **Audio files** (already working this way):
   ```tsx
   const audio = new Audio('/nicey.mp3')  // File in /public/nicey.mp3
   ```

2. **SVG files** (now fixed):
   ```tsx
   <img src="/folder-icon.svg" />  // File in /public/folder-icon.svg
   ```

3. **PNG/JPG files** (use the same pattern):
   ```tsx
   <img src="/my-image.png" />  // File in /public/my-image.png
   ```

**Key insight:** The file SIZE doesn't matter when it's external. A 5MB audio file works fine because we're just referencing the path, not embedding the data.

### How to Add Images to Your Project

**Step 1: Add file to /public folder**
```bash
# Copy file to public folder (use Git Bash cp command)
cp "/path/to/source/image.svg" public/image.svg
```

**Step 2: Reference in your code**
```tsx
<img src="/image.svg" alt="Description" width="48" height="48" />
```

**Step 3: Commit and deploy**
```bash
git add public/image.svg app/your-component.tsx
git commit -m "Add image as external file"
git push
```

### File Types & Best Practices

**SVG Files:**
- ✅ Perfect for icons, logos, illustrations
- ✅ Scales to any size without quality loss
- ✅ Can change colors with CSS (if structured properly)
- ✅ Smaller file size than raster images
- **Store in:** `/public/icon-name.svg`
- **Reference as:** `<img src="/icon-name.svg" />`

**PNG Files:**
- ✅ Best for photos, complex images with transparency
- ✅ Lossless compression
- ✅ Universal browser support
- **Store in:** `/public/photo-name.png`
- **Reference as:** `<img src="/photo-name.png" />`

**JPG Files:**
- ✅ Best for photographs without transparency
- ✅ Smaller file sizes than PNG
- ✅ Good for backgrounds, hero images
- **Store in:** `/public/photo-name.jpg`
- **Reference as:** `<img src="/photo-name.jpg" />`

**Audio Files (MP3, WAV):**
- ✅ Already using this pattern correctly
- ✅ Works perfectly for sound effects
- **Store in:** `/public/sound-name.mp3`
- **Reference as:** `new Audio('/sound-name.mp3')`

### Converting Existing Inline SVGs

If you find inline SVG code in components:

**1. Extract the SVG code**
- Copy entire `<svg>...</svg>` block
- Save as separate file: `public/icon-name.svg`

**2. Replace in component**
```tsx
// Before (inline):
<svg width="48" height="48" viewBox="0 0 60 60">
  {/* thousands of characters */}
</svg>

// After (external):
<img src="/icon-name.svg" width="48" height="48" alt="Icon" />
```

**3. Delete inline code**
- Remove all the path data
- Much cleaner component file
- No more corruption risk

### Real-World Example: Folder Icon Fix

**Before (caused corruption):**
- `app/dashboard/page.tsx` had 5000+ character inline SVG
- File size: ~100KB
- Multiple edit attempts caused corruption
- Required git restore to recover

**After (works perfectly):**
- Created `public/folder-icon.svg` (separate file)
- Component now has: `<img src="/folder-icon.svg" />`
- File size: ~12KB component, ~13KB SVG
- Clean, maintainable, no corruption risk

### When to Use Each Approach

**External Files (ALWAYS for images/media):**
- ✅ SVG icons and illustrations
- ✅ PNG/JPG photos and images
- ✅ Audio files (MP3, WAV)
- ✅ Any binary file
- **Benefit:** Clean code, no corruption, easy updates

**Inline Code (only for small, simple elements):**
- ✅ Simple geometric shapes (triangles, circles)
- ✅ Small icons (<50 characters)
- ✅ CSS-generated graphics
- **Rule:** If it's more than 3-4 lines, make it external

### Future-Proofing Your Project

**Going forward:**
1. **NEVER embed** large SVGs in component files
2. **ALWAYS use** `/public` folder for images/media
3. **Think like MP3s** - if audio files work this way, images should too
4. **Keep components clean** - reference files, don't embed them

### Technical Benefits

**Why this architecture is better:**

1. **No file corruption** - Small file edits stay small
2. **Faster builds** - Next.js optimizes static assets
3. **Better caching** - Browsers cache images separately
4. **Easier updates** - Replace file without touching code
5. **Version control** - Binary files tracked properly
6. **Team collaboration** - No merge conflicts on images
7. **Performance** - CDN can optimize delivery

### Common Mistakes to Avoid

**❌ DON'T:**
- Inline SVGs larger than a few lines
- Embed base64 images in components (except audio with Web Audio API)
- Hard-code image data in JavaScript
- Copy-paste SVG code from design tools directly into components

**✅ DO:**
- Save images as separate files in `/public`
- Reference with simple `src` paths
- Keep component files small and readable
- Use appropriate file formats (SVG vs PNG vs JPG)

---

## ⚠️ CRITICAL GOTCHAS & RULES

### 1. Rolling Back to Previous Working Versions
- **Problem:** Experimental changes break production (e.g., audio playback rate issues)
- **Solution:** Use git to revert to last known working commit
- **How to identify working version:**
  ```bash
  git log --oneline -20  # See recent commits with timestamps
  ```
- **How to revert a single file:**
  ```bash
  git checkout <commit-hash> -- path/to/file.tsx
  git add path/to/file.tsx
  git commit -m "Revert to working version from <commit-hash>"
  git push
  ```
- **Example from Oct 14, 2025:**
  - Commits a4116e5 through e844157 broke the defining-objectives page
  - Audio playback rate set to 16.8x caused client-side errors
  - Reverted to commit 47f9986 which had stable 12x playback rate
  - Lesson: Incremental changes are safer than aggressive optimizations
- **Warning signs to revert:**
  - "NotSupportedError" or "playbackRate" errors in browser console
  - Client-side exceptions during page load
  - Features that worked 20-30 minutes ago suddenly broken

### 2. File-Based Database Won't Work in Production
- **Problem:** Vercel has read-only file systems
- **Solution:** Always use PostgreSQL (Neon), never SQLite in production

### 2. Color Consistency
- **Problem:** Dark blue color was too black
- **Solution:** Always use #163E64 (navy blue) for main text/headings
- **Where to update:** globals.css, component files, anywhere "text-gray-900" or dark blue appears

### 3. Server vs. Client Components
- **Rule:** Use "use client" directive only when needed (interactivity, hooks)
- **Default:** Server components for better performance
- **Common needs for "use client":** useState, useEffect, onClick handlers

### 4. Authentication Routes
- **Public routes:** /, /login, /register, /privacy, /terms, /support
- **Protected routes:** /dashboard, /organizations
- **Redirect logic:** In page components via session checks

### 5. Git Workflow
- **Never commit:** .env files, node_modules, database files
- **Always commit:** package.json changes, schema changes, source code
- **Standard practice:** ALWAYS commit and push after making changes (vibe coding in prod)
- **Use branches:** Only for experimental features (main branch auto-deploys immediately)

**IMPORTANT - Working Git Commands for Cline:**
Due to the directory structure and Windows/Git Bash environment, use this exact command format:
```bash
cd carbon-reduction-planner; git add <file>; git commit -m "message"; git push
```

**Why this works:**
- Semicolons (`;`) chain commands in the same shell session
- `cd carbon-reduction-planner` ensures you're in the right directory
- All git operations happen in sequence without switching contexts

**What DOESN'T work:**
- `cd carbon-reduction-planner && git ...` (fails with "not a git repository")
- `git -C carbon-reduction-planner ...` (inconsistent results)
- `git --git-dir=... --work-tree=...` (fails with "not a git repository")

**Example usage:**
```bash
cd carbon-reduction-planner; git add app/page.tsx; git commit -m "Update homepage styles"; git push
```

### 6. Spacing/Layout Issues
- **Problem:** Hero sections cut off, too much vertical space
- **Solution:** Use min-height instead of fixed height, test at different screen sizes
- **Key files:** app/page.tsx, globals.css

### 7. Audio Playback Limits
- **Problem:** Aggressive audio settings (high playbackRate, loop) cause browser errors
- **Solution:** Keep audio simple and test incrementally
- **Safe settings:**
  - Volume: 0.2 to 0.6 (20-60%)
  - PlaybackRate: 1x to 4x (above 8x becomes unreliable)
  - Avoid: loop=true on complex sounds, extreme playback rates (12x+)
- **Current working implementation (Oct 14, 2025):**
  - Pop sound: sharp-pop.mp3, volume 0.56, no playback modification
  - Completion sound: completion-sound.mp3, volume 0.24
  - Points sound: 111111.mp3, volume 0.5, playbackRate 12x (this is at the limit)
- **Testing approach:**
  - Always test audio in production environment
  - Check browser console for "NotSupportedError"
  - If experimenting with faster sounds, increment gradually (4x → 6x → 8x)
  - Never go above 12x playbackRate - browsers can't handle it

---

## 🔧 COMMON TASKS & HOW TO DO THEM

### Task: Add Sound Effects (Audio Playback)
**Current Implementation:** "Snap sound effect" plays when user closes registration completion modal

**What we learned that WORKS:**
1. **Use base64-encoded audio** embedded directly in component (no external files)
2. **Use Web Audio API** with async/await for reliable playback
3. **Critical:** The base64 format matters - must be a valid audio format (MP3 works)

**Implementation Pattern (Registration snap sound as reference):**
```typescript
// 1. Embed base64 audio at component level
const AUDIO_BASE64 = "//uUZAAAAAAAAAAAAAAAAAAAAAAAAAAAA..." // Full base64 string

// 2. Create async playback function using Web Audio API
const playSoundEffect = async () => {
  try {
    // Create audio context
    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()
    
    // Convert base64 to ArrayBuffer
    const binaryString = atob(AUDIO_BASE64)
    const bytes = new Uint8Array(binaryString.length)
    for (let i = 0; i < binaryString.length; i++) {
      bytes[i] = binaryString.charCodeAt(i)
    }
    
    // Decode and play audio
    const audioBuffer = await audioContext.decodeAudioData(bytes.buffer)
    const source = audioContext.createBufferSource()
    source.buffer = audioBuffer
    source.connect(audioContext.destination)
    source.start(0)
  } catch (error) {
    console.log('Error playing sound:', error)
  }
}

// 3. Call function on user interaction (e.g., button click)
onClick={() => {
  // Do UI stuff first
  setModalOpen(false)
  // Play sound as background effect
  setTimeout(() => playSoundEffect(), 0)
}}
```

**To Add More Sound Effects:**
1. Get audio file (MP3, WAV, etc.)
2. Convert to base64 (use online converter or command line)
3. Test the base64 in a simple HTML file first (see testing pattern below)
4. Once confirmed working, add to component following pattern above
5. Name function descriptively: `playSnapSound()`, `playSuccessSound()`, `playErrorSound()`, etc.

**Testing Pattern (HTML test file):**
```html
<!DOCTYPE html>
<html><body>
<button id="playBtn">Play Sound</button>
<script>
  const base64Audio = "YOUR_BASE64_HERE";
  async function playSound() {
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const binaryString = atob(base64Audio);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      const audioBuffer = await audioContext.decodeAudioData(bytes.buffer);
      const source = audioContext.createBufferSource();
      source.buffer = audioBuffer;
      source.connect(audioContext.destination);
      source.start(0);
    } catch (error) {
      console.error('Error:', error);
    }
  }
  document.getElementById('playBtn').addEventListener('click', playSound);
</script>
</body></html>
```

**What DOESN'T work:**
- ❌ Simple `new Audio()` constructor with base64 - unreliable
- ❌ Callback-based `decodeAudioData()` - prefer async/await
- ❌ External audio files - adds HTTP requests, deployment complexity
- ❌ Truncated base64 strings - must be complete

**Where it's implemented:**
- `app/register/page.tsx` - Snap sound on modal close

**Useful Resources:**
- **Sound Effects Library:** https://pixabay.com/sound-effects/ (free, royalty-free)
  - Finger snap sound: https://pixabay.com/sound-effects/finger-snap-179180/
  - Glass crack sound: https://pixabay.com/sound-effects/glass-crack-363162/
- **Audio to Base64 Converter:** https://base64.guru/converter/encode/audio
- **Testing Base64 Audio Playback:** https://claude.ai/public/artifacts/be77c0a5-0695-4104-8686-f8eddc2dcfe4

### Task: Update Colors Site-Wide
1. Check STYLE_GUIDELINES.md for current color scheme
2. Update globals.css for Tailwind custom colors
3. Search all component files for hardcoded colors
4. Test on both light backgrounds and dark buttons
5. Verify accessibility (contrast ratios)

### Task: Add New Page
1. Create `app/new-page/page.tsx`
2. Add to Header.tsx navigation if needed
3. Add to Footer.tsx if it's a legal page
4. Test routing works locally
5. Push to deploy

### Task: Modify Database Schema
1. Edit `prisma/schema.prisma`
2. Run `npx prisma db push` locally to test
3. Commit and push (Vercel runs migrations automatically)
4. Verify in Neon dashboard that changes applied

### Task: Fix Authentication Issues
1. Check lib/auth.ts for NextAuth config
2. Verify environment variables in Vercel
3. Check app/api/auth/[...nextauth]/route.ts exists
4. Test login flow locally first

### Task: Adjust Spacing/Layout
1. Identify the component file (usually app/page.tsx or component file)
2. Look for Tailwind classes (py-, px-, h-, min-h-, space-y-)
3. Test responsively (mobile, tablet, desktop)
4. Use browser dev tools to inspect actual rendered spacing
5. Adjust incrementally (don't make huge changes at once)

---

## 📚 WHERE TO FIND INFORMATION

### For Design Questions
→ Read `STYLE_GUIDELINES.md` first
→ Check `globals.css` for custom Tailwind config
→ Look at existing components for patterns

### For Deployment/Git Questions
→ Read `GIT_WORKFLOW.md` for basics
→ Read `DEPLOYMENT_GUIDE.md` for detailed process
→ Read `VERCEL_SETUP.md` for environment setup

### For Database Questions
→ Look at `prisma/schema.prisma` for models
→ Check `lib/prisma.ts` for client setup
→ Check `lib/auth.ts` for how auth uses database

### For Authentication Questions
→ Look at `lib/auth.ts` (NextAuth config)
→ Check `app/login/page.tsx` and `app/register/page.tsx`
→ Read DEPLOYMENT_GUIDE.md section on authentication

---

## 🎯 DEVELOPMENT PRINCIPLES

### Standard Workflow (ALWAYS FOLLOW)
1. **Make changes** - Edit files as needed
2. **Test briefly** - Run `npm run dev` to verify it works
3. **Commit and push** - ALWAYS do this immediately after changes
4. **Deploy live** - Vercel auto-deploys, we iterate if needed

**"Vibe coding in prod"** - We don't do extensive testing cycles. Make the change, push it, improve if needed.

### When Making Changes
1. **Always consider the big picture** - How does this affect other parts?
2. **Test locally briefly** - Run `npm run dev` to verify it works
3. **Commit and push immediately** - Don't wait, deploy now (standard practice)
4. **Check existing patterns** - Don't reinvent, follow established patterns
5. **Read the guidelines** - Design system exists for consistency
6. **Think mobile-first** - Always test responsive behavior
7. **Maintain accessibility** - Color contrast, keyboard navigation, etc.

### When Adding Features
1. **Check if it fits the privacy-first approach**
2. **Consider database schema impacts**
3. **Follow existing component patterns**
4. **Add to appropriate documentation file**
5. **Test authentication implications**

### When Fixing Bugs
1. **Understand the root cause** - Don't just patch symptoms
2. **Check if it affects production** - Test deployed version
3. **Consider edge cases** - Empty states, error states, loading states
4. **Update documentation** - If the fix reveals a gotcha

---

## 🚨 RED FLAGS - STOP AND THINK IF...

- **You're about to change authentication** → Verify this won't break existing users
- **You're modifying the database schema** → Consider migration impact
- **You're changing core layout files** → Test all pages, not just one
- **You're adding dependencies** → Check bundle size impact
- **You're hardcoding values** → Should this be in environment variables?
- **You're copy-pasting code** → Should this be a reusable component?
- **You're seeing TypeScript errors** → Don't ignore, fix properly
- **Colors look different than design** → Double-check hex codes

---

## 💡 PROJECT GOALS & CONTEXT

### Why We Built This
- Help organizations track carbon reduction efforts
- Make sustainability planning accessible
- Provide privacy-first alternative to enterprise tools
- Enable tactical planning with timelines and costs

### Future Features (Potential)
- PDF report exports
- Data visualization charts
- Multi-user organizations
- Integration with carbon calculators
- Mobile app version

### User Journey
1. Visit homepage → Learn about the tool
2. Register → Create account with username
3. Dashboard → View organizations
4. Create organization → Set up emissions tracking
5. Add tactics → Plan reduction strategies
6. Visualize progress → See projected vs. actual

---

## 🔍 HOW TO USE THIS FILE

**Cline automatically reads this file at the start of every task.** You don't need to do anything special - just start a new task, and I'll have this context.

**If you need to update this file:**
1. Open `.clinerules`
2. Edit the relevant section
3. Save and commit
4. Next task will use updated context

**Sections to update regularly:**
- Recent gotchas you discover
- New features added
- Changes to design system
- New critical rules

---

## 🌟 RECENT MAJOR FEATURES (October 2025)

### Energy Transition Strategy Module - Defining Objectives Page
**Location:** `app/dashboard/transition-strategy/defining-objectives/page.tsx`

**Purpose:** Interactive drag-and-drop interface for users to prioritize their climate objectives using star ratings.

#### Core Functionality

**Star Prioritization System:**
- 20 draggable stars in a pool
- 10 objective categories users can assign stars to
- Real-time percentage calculations based on star distribution
- Pop sound effect plays when star is placed in objective
- Stars can be dragged anywhere but only stick when placed in objectives
- Stars return to pool when dragged back to star box

**Objective Categories (in priority order):**
1. Be prepared for climate risks
2. Save the planet
3. Fight for climate justice
4. Legal compliance
5. Save money / increasing efficiency
6. Improve sales / business value / access to funding
7. Win ESG points: (CDP, Ecovadis, etc.)
8. Maintain our reputation and social license
9. Other (Type a new name here) - Option 1
10. Other (Type a new name here) - Option 2

**Editable Objectives:**
- Last 2 objectives are editable (users can type custom names)
- Input fields match objective box styling

#### Audio Implementation

**Pop Sound on Star Placement:**
```typescript
// Preload audio in useEffect
const audio = new Audio('/pop-sound.mp3')
audio.preload = 'auto'
audio.load()

// Play on drop
if (popAudio) {
  popAudio.currentTime = 0
  popAudio.play().catch(err => console.log('Audio play failed:', err))
}
```

**Key Details:**
- Sound file located at `/public/pop-sound.mp3`
- Preloaded on component mount for instant playback
- Plays only when star successfully placed in objective
- No sound when dragging or returning to pool

#### Design System

**Page Layout:**
- Title: "Think about your objectives" (bold, #0B1F32)
- Subtitle: "What are you trying to achieve with your work on climate change?" (regular weight, #0B1F32)
- Two-column layout: objectives on left, star pool on right

**Objective Boxes:**
- Background: #f5f5f5 (light grey)
- Border: 1px solid #0B1F32
- Compact padding: p-1.5
- Space between rows: space-y-1.5
- Text color: #0B1F32
- Percentage color: #FF5B35 (orange)
- Percentage position: Fixed width (w-10), right-aligned, positioned close to text

**Star Appearance:**
- Size in objectives: w-7 h-7 (28px)
- Size in pool: w-8 h-8 (32px)
- Color: #FF5B35 (orange star ★)
- Background: white circle
- Border: 2px solid white (nearly invisible, blends with backgrounds)
- Spacing: gap-1.5 between stars

**Star Pool Box:**
- Size: 320px × 384px (w-80 h-96)
- Background: bg-gray-50 (light grey)
- Border: 2px solid #0B1F32
- Rounded corners

**Instructions:**
- Located at top of star box
- White background section at top
- Border bottom: 1px solid #0B1F32
- Text: Small (text-xs), #0B1F32 color
- Content: "Instructions: Drag stars from the box on the right to prioritize your objectives. The more stars you assign to an objective, the higher priority it is for your organization."
- Pointer events disabled (non-interactive overlay)

**Completion Button:**
- Background: #0B1F32 (matches header)
- Text: White
- Width: Auto (px-6 padding, not full width)
- Centered below star box
- Text: "Mark this activity as complete"
- Completed state: "✓ Activity Completed"
- Hover: opacity-90 effect

#### State Management

```typescript
// Category state with star counts
const [categories, setCategories] = useState<Category[]>([...])

// Star positions and assignments
const [stars, setStars] = useState<Star[]>([])

// Currently dragged star
const [draggedStarId, setDraggedStarId] = useState<number | null>(null)

// Completion tracking
const [isCompleted, setIsCompleted] = useState(false)
```

**Star Initialization:**
- 20 stars placed randomly in pool on mount
- Random x: 10-250px range
- Random y: 100-300px range (below instructions)

**Drag and Drop Logic:**
- `handleDragStart`: Captures star ID
- `handleDrop`: Updates star position/assignment
- `handleDragOver`: Prevents default to allow drop
- Percentage calculation: `Math.round((stars / total) * 100)`

#### Key Technical Details

**Color Consistency:**
- ALL blues use #0B1F32 (exact match to header)
- Never use #163E64 or #0B1F32 inconsistently
- Orange accents: #FF5B35 for stars and percentages

**Compact Spacing:**
- Objective padding: p-1.5 (6px)
- Text padding: py-0.5 (2px vertical)
- Row spacing: space-y-1.5 (6px)
- Star gap: gap-1.5 (6px)
- Enables all 10 objectives visible without scrolling

**Responsive Behavior:**
- Container: max-w-6xl (prevents horizontal scroll)
- Two-column flex layout
- Star box fixed width (320px)
- Objectives flex-1 (takes remaining space)

#### Critical Design Rules for This Page

1. **Header color match:** ALL blues must be #0B1F32
2. **Light grey backgrounds:** Objectives and star box use grey (#f5f5f5, bg-gray-50)
3. **White star circles:** Barely visible borders, blends with backgrounds
4. **Percentage alignment:** Fixed width column, positioned close to text
5. **Compact layout:** All 10 objectives fit on screen without scrolling
6. **Audio feedback:** Pop sound on successful star placement only
7. **Climate priorities first:** Risk, planet, justice objectives at top

#### Future Enhancements (Planned)

- **Cross-page completion tracking:** Link completion state to transition strategy timeline
- **Data persistence:** Save star assignments to database
- **Progress indicators:** Show completion across all sub-activities
- **Timeline integration:** Mark circle on transition strategy page when complete

---

## 🏪 POINTS STORE SYSTEM (October 2025)

### Overview & Purpose

**What it is:** A complete e-commerce system for redeeming earned points for consulting services and access to premium content.

**Why it exists:**
- Users earn points by completing activities (50 points per activity completion)
- Points create engagement and provide value beyond free tools
- Offers a path to deeper consulting relationships
- Demonstrates full-stack e-commerce capabilities
- Privacy-first: No payment processing, just point redemption

**Key Philosophy:** Users "spend" points they've earned, not real money. This maintains the free-to-use nature while creating a reward system.

---

### Technical Architecture

**Database Schema (Prisma):**
```prisma
model User {
  id           String         @id @default(cuid())
  username     String         @unique
  password     String
  score        Int            @default(0)  // Points balance
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  purchases    Purchase[]     // Relation to purchases
}

model Purchase {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  itemType     String    // e.g., "review-session", "climate-web-access"
  itemName     String    // Display name
  pointsCost   Int       // Cost in points
  purchaseCode String    @unique  // 8-character unique code
  isUtilized   Boolean   @default(false)  // Has user redeemed it?
  utilizedAt   DateTime? // When was it redeemed
  createdAt    DateTime  @default(now())
  
  @@index([userId])
  @@index([purchaseCode])
}
```

**API Endpoints:**
- `GET /api/purchases` - Fetch user's purchase history
- `POST /api/purchases` - Create new purchase (deducts points, generates code)
- `PATCH /api/purchases` - Mark purchase as utilized

**Authentication Integration:**
- Uses NextAuth session with `session.user.id`
- Type definitions in `types/next-auth.d.ts` extend default NextAuth types
- Session callbacks in `lib/auth.ts` add user ID to session

---

### File Structure

```
app/
├── store/
│   ├── page.tsx                 # Main store (browse & purchase)
│   ├── confirmation/
│   │   └── page.tsx            # Post-purchase confirmation
│   └── redeem/
│       └── page.tsx            # Redemption page
├── api/
│   └── purchases/
│       └── route.ts            # Purchase API (GET/POST/PATCH)
components/
└── Header.tsx                   # Shows "Use Points" link, points balance
types/
└── next-auth.d.ts              # NextAuth type extensions
```

---

### User Flow & Pages

#### 1. Header Integration
**Location:** `components/Header.tsx`

**Changes:**
- "Score" renamed to "Points" 
- Shows current points balance (e.g., "Your Points: 500")
- "Organizations" replaced with "Use Points" navigation link
- Links to `/store`

#### 2. Store Main Page (`/store`)
**Location:** `app/store/page.tsx`

**Features:**
- **Points Balance Display:** Shows user's current points at top
- **Available Items Section:** Two purchasable items:
  1. **Review Session (500 points)**
     - "One hour video call where you show us what you've done and we give feedback and guidance"
  2. **Access to the Climate Web (500 points)**
     - "The world's most complete climate knowledge base"

**Item Selection:**
- Click item card to select (orange border highlights)
- Click again to deselect
- Only one item can be selected at a time
- If user doesn't have enough points, item appears greyed out (not clickable)

**Purchase Process:**
1. User selects item
2. "Purchase [Item Name]" button appears
3. Click to purchase → Instant deduction of points
4. Generates unique 8-character purchase code
5. Redirects to confirmation page with purchase ID

**Your Purchases Section:**
- Lists all user's purchases (newest first)
- Each purchase shows:
  - Item name
  - Purchase date
  - Unique purchase code
  - Status: "Redeem" button OR "Already Utilized" badge
- Click "Redeem" → Goes to redemption page
- "Already Utilized" appears greyed out (no action)

**Design:**
- Cards match dashboard module style: grey background, dark blue border
- Orange accents for selected state and prices
- Responsive layout (items stack on mobile)

#### 3. Confirmation Page (`/store/confirmation`)
**Location:** `app/store/confirmation/page.tsx`

**Purpose:** Shows purchase confirmation immediately after buying

**Features:**
- 🎉 Congratulations message with confetti emoji
- Displays purchased item name in large orange text
- **Purchase Code Display:**
  - Large 5xl font-mono display
  - Orange border box
  - Code example: `ZNCDQ63R`
  - Instruction: "Save this code - you'll need it to redeem your purchase"

**Utilize Now Button:**
- Opens email client pre-filled with:
  - To: Keith.nelson@newdayinternationalconsulting.com
  - Subject: "Redeeming: [Item Name]"
  - Body: Item name, purchase code, purchase date
- **Marks purchase as utilized in database**
- **Automatically redirects to store** after 1 second
- Button shows "Processing..." during action
- Prevents double-utilization

**Instructions Section:**
- Explains redemption process
- 24-hour response time promise
- Note about redeeming later from store

**Back to Store Button:**
- Manual navigation option
- Dark navy background

**Technical Notes:**
- Uses `useSearchParams()` wrapped in Suspense boundary (Next.js 15 requirement)
- Fetches purchase details by ID from query param
- Validates purchase belongs to logged-in user

#### 4. Redeem Page (`/store/redeem`)
**Location:** `app/store/redeem/page.tsx`

**Purpose:** Dedicated page for redeeming purchases from "Your Purchases" list

**Features:**
- Title: "Redeem Your Purchase"
- Shows item name being redeemed
- Displays purchase code prominently
- Shows purchase date

**Utilize Now Button:**
- Same email functionality as confirmation page
- Marks as utilized in database
- Auto-redirects to store after 1 second
- Shows "Processing..." state

**Protection:**
- If purchase already utilized → Redirects to store
- Validates purchase belongs to user
- Prevents re-redemption

**What Happens Next Section:**
- Email client opens automatically
- Purchase marked utilized
- 24-hour response promise
- User returns to store

---

### Purchase Code System

#### Code Generation
**Location:** `app/api/purchases/route.ts`

**Algorithm:**
```typescript
function generatePurchaseCode(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  let code = ''
  for (let i = 0; i < 8; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return code
}
```

**Characteristics:**
- **8 characters long**
- **Alphanumeric:** A-Z and 0-9 only (36 possible characters per position)
- **Total possible combinations:** 36^8 = 2,821,109,907,456 (2.8 trillion)
- **Collision-free:** Checks database before using
- **Unique constraint:** Database enforces uniqueness

**Example Codes:**
- `ZNCDQ63R`
- `A7B3X9K2`
- `M4T8P2N5`
- `7KLP4XWQ`

#### Uniqueness Guarantee

**Generation Process:**
```typescript
// Generate code
let purchaseCode = generatePurchaseCode()

// Check if exists in database
let codeExists = await prisma.purchase.findUnique({ 
  where: { purchaseCode } 
})

// Keep generating until unique
while (codeExists) {
  purchaseCode = generatePurchaseCode()
  codeExists = await prisma.purchase.findUnique({ 
    where: { purchaseCode } 
  })
}
```

**Database Constraint:**
```prisma
model Purchase {
  purchaseCode String @unique  // Enforced at DB level
  // ...
}
```

#### Code Validation (for Administrator)

**How to validate a code someone sends:**
1. Access Neon database dashboard
2. Run query:
   ```sql
   SELECT * FROM "Purchase" WHERE "purchaseCode" = 'ZNCDQ63R';
   ```
3. Results show:
   - ✅ User who purchased it
   - ✅ Item they purchased
   - ✅ Purchase date
   - ✅ Whether already utilized
   - ✅ Utilization timestamp

**Validation in Application:**
- No user-facing validation tool (intentionally)
- Codes stored permanently in database
- Email redemptions include code
- You can always look up code in database
- Invalid codes won't exist in system

**Why validation isn't needed:**
- System generates all codes
- Users can't create fake codes
- Email provides paper trail
- Database is source of truth

---

### API Implementation

#### GET /api/purchases
**Purpose:** Fetch user's purchase history

**Request:**
- Method: `GET`
- Auth: Requires valid session
- Params: None

**Response:**
```typescript
{
  purchases: [
    {
      id: "cm2...",
      itemType: "review-session",
      itemName: "Review Session",
      pointsCost: 500,
      purchaseCode: "ZNCDQ63R",
      isUtilized: false,
      createdAt: "2025-10-16T10:00:00.000Z",
      utilizedAt: null
    }
  ]
}
```

**Implementation:**
```typescript
const user = await prisma.user.findUnique({
  where: { id: session.user.id },
  include: {
    purchases: {
      orderBy: { createdAt: 'desc' }
    }
  }
})
```

#### POST /api/purchases
**Purpose:** Create new purchase

**Request:**
```typescript
{
  itemType: "review-session",
  itemName: "Review Session",
  pointsCost: 500
}
```

**Process:**
1. Validate user has sufficient points
2. Generate unique purchase code
3. Create purchase and deduct points in **single transaction**
4. Return purchase details

**Transaction Safety:**
```typescript
const purchase = await prisma.$transaction(async (tx) => {
  // Deduct points
  await tx.user.update({
    where: { id: user.id },
    data: { score: user.score - pointsCost }
  })

  // Create purchase
  return await tx.purchase.create({
    data: {
      userId: user.id,
      itemType,
      itemName,
      pointsCost,
      purchaseCode
    }
  })
})
```

**Why Transaction Matters:**
- Ensures atomicity: Either both succeed or both fail
- Prevents losing points without getting purchase
- Prevents getting purchase without losing points
- Database rollback if any step fails

**Response:**
```typescript
{
  purchase: {
    id: "cm2...",
    purchaseCode: "ZNCDQ63R",
    // ... other fields
  }
}
```

#### PATCH /api/purchases
**Purpose:** Mark purchase as utilized

**Request:**
```typescript
{
  purchaseId: "cm2..."
}
```

**Validation:**
1. Verify purchase exists
2. Verify purchase belongs to requesting user
3. Update utilization status

**Process:**
```typescript
const updatedPurchase = await prisma.purchase.update({
  where: { id: purchaseId },
  data: {
    isUtilized: true,
    utilizedAt: new Date()
  }
})
```

**Response:**
```typescript
{
  purchase: {
    id: "cm2...",
    isUtilized: true,
    utilizedAt: "2025-10-16T11:00:00.000Z",
    // ... other fields
  }
}
```

---

### Points System Integration

#### Earning Points
**Location:** Activity completion (e.g., defining objectives page)

**Process:**
```typescript
const awardPoints = async () => {
  // Award 50 points
  await fetch('/api/score', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ points: 50 }),
  })

  // Trigger header to refresh display
  window.dispatchEvent(new Event('scoreUpdated'))
}
```

**When Points Are Awarded:**
- Completing "Defining Objectives" activity: 50 points
- Other activities: 50 points each (as implemented)
- Points add to user's balance immediately
- Header counter animates up to show new total

#### Spending Points
**Location:** Store purchase flow

**Process:**
1. User selects item (500 points)
2. Clicks "Purchase" button
3. API deducts 500 from user's score
4. Purchase created with unique code
5. Header automatically updates (via scoreUpdated event)
6. User sees reduced balance

**Balance Display:**
- Header shows: "Your Points: [number]"
- Store page shows current balance
- Updates in real-time after purchase
- Cannot purchase if insufficient points

---

### Email Integration

#### Auto-Fill Email System
**Purpose:** Make redemption frictionless

**Implementation:**
```typescript
const handleUtilize = async () => {
  // Construct email
  const subject = encodeURIComponent(`Redeeming: ${itemName}`)
  const body = encodeURIComponent(
    `Hello,\n\nI would like to redeem my purchase:\n\n` +
    `Item: ${itemName}\n` +
    `Purchase Code: ${purchaseCode}\n` +
    `Purchase Date: ${purchaseDate}\n\n` +
    `Thank you!`
  )
  
  // Open email client
  window.location.href = 
    `mailto:Keith.nelson@newdayinternationalconsulting.com?subject=${subject}&body=${body}`
}
```

**What Happens:**
1. User's default email client opens
2. To field pre-filled: Keith.nelson@newdayinternationalconsulting.com
3. Subject line: "Redeeming: Review Session" (or other item)
4. Body includes:
   - Item name
   - Purchase code
   - Purchase date
   - Professional greeting/closing

**Cross-Platform:**
- Works on Windows, Mac, Linux
- Opens default email client (Outlook, Mail, Gmail, etc.)
- Mobile-friendly (opens mobile email apps)
- Falls back gracefully if no email client configured

**User Experience:**
- Instant - no page load
- No typing required
- Professional formatting
- All details included
- Ready to send immediately

---

### Design System Integration

#### Color Scheme
- **Item cards:** Grey background (#f5f5f5), dark blue border (#0B1F32)
- **Selected state:** Orange border (#FF5B35)
- **Prices:** Orange text (#FF5B35)
- **Buttons:** Orange (purchase), Dark navy (secondary)
- **Utilized badges:** Grey, low opacity

#### Layout Patterns
- **Responsive grid:** 2 columns on desktop, 1 on mobile
- **Card consistency:** Matches dashboard module cards
- **Hover effects:** opacity-90, 150ms transition
- **Spacing:** Follows 4px grid system

#### Typography
- **Headings:** Bold, #0B1F32 (navy)
- **Purchase codes:** 5xl font-mono, bold
- **Body text:** Regular, #6C757D (grey)
- **Prices:** Bold, #FF5B35 (orange)

#### Visual Hierarchy
1. Points balance (top, prominent)
2. Available items (large cards)
3. Purchase button (orange, centered)
4. Your purchases (lower, compact list)

---

### Key Implementation Details

#### Suspense Boundaries (Next.js 15)
**Problem:** `useSearchParams()` requires Suspense in Next.js 15

**Solution:**
```typescript
function PageContent() {
  const searchParams = useSearchParams()
  // ... component logic
}

export default function Page() {
  return (
    <Suspense fallback={<LoadingState />}>
      <PageContent />
    </Suspense>
  )
}
```

**Applied to:**
- `app/store/confirmation/page.tsx`
- `app/store/redeem/page.tsx`

#### Auto-Redirect Pattern
**Implementation:**
```typescript
// After marking as utilized
setTimeout(() => {
  router.push('/store')
}, 1000)
```

**Why 1 second:**
- Gives email client time to open
- User sees "Processing..." state
- Smooth transition
- Not too fast, not too slow

#### State Management
**Confirmation/Redeem Pages:**
```typescript
const [purchase, setPurchase] = useState<Purchase | null>(null)
const [isLoading, setIsLoading] = useState(true)
const [isRedeeming, setIsRedeeming] = useState(false)
```

**Store Page:**
```typescript
const [selectedItem, setSelectedItem] = useState<string | null>(null)
const [purchases, setPurchases] = useState<Purchase[]>([])
const [isPurchasing, setIsPurchasing] = useState(false)
```

**Loading States:**
- Initial load: Skeleton/spinner
- Processing: "Processing..." button text
- Success: Redirect with data
- Error: Alert dialog

---

### Security & Privacy

#### Authentication
- All API routes verify `session.user.id`
- Purchase ownership validated before redemption
- No public access to purchase data
- Session required for all store pages

#### Data Privacy
- Purchase codes NOT tied to real identities
- Only username associated (anonymous)
- No email required for purchases
- No payment processing (points only)
- User controls when to share code (via email)

#### Transaction Safety
- Points deduction atomic with purchase creation
- Database constraints prevent duplicates
- No partial transactions possible
- Rollback on any error

---

### Testing Checklist

**Purchase Flow:**
- [ ] User can see points balance
- [ ] User can select/deselect items
- [ ] Purchase button appears on selection
- [ ] Can't select item without enough points
- [ ] Points deducted on purchase
- [ ] Unique code generated
- [ ] Redirects to confirmation

**Confirmation Flow:**
- [ ] Purchase code displays correctly
- [ ] Utilize Now opens email
- [ ] Purchase marked as utilized
- [ ] Auto-redirects to store
- [ ] Can't double-redeem

**Redemption Flow:**
- [ ] Purchases list shows all purchases
- [ ] Utilized purchases show badge
- [ ] Non-utilized show Redeem button
- [ ] Redeem opens email
- [ ] Marks as utilized
- [ ] Auto-redirects

**Edge Cases:**
- [ ] Insufficient points (can't purchase)
- [ ] Already utilized (can't redeem)
- [ ] Invalid purchase ID (404 redirect)
- [ ] Not owner of purchase (unauthorized)
- [ ] Session expired (login redirect)

---

### Future Enhancements (Potential)

**Planned:**
- More purchasable items (different point values)
- Gift purchases (transfer to another user)
- Purchase history export (PDF/CSV)
- Points expiration system
- Seasonal special offers
- Bundle discounts

**Under Consideration:**
- Refund system (points back if unused)
- Purchase notes/customization
- Email confirmation receipts
- Purchase analytics for admin
- Leaderboard (most points earned)

---

## ✅ CHECKLIST FOR NEW TASKS

When starting work on a task, verify:
- [ ] I understand the project structure
- [ ] I know which files to modify
- [ ] I've checked STYLE_GUIDELINES.md if design-related
- [ ] I know the deployment process
- [ ] I understand the authentication flow
- [ ] I'm using the correct colors (#163E64 for navy)
- [ ] I'll test locally before pushing
- [ ] I understand how this affects the big picture

---

**Last Updated:** October 2025
**Project Status:** Live in production, actively maintained
**Production URL:** https://risk-software.newdayclimate.com
**User:** Nelson, using Cline + Claude Sonnet for development
