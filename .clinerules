# CO₂ Reduction Planner - Project Context for Cline

## 🌍 THE BIG PICTURE - WHO, WHY, AND VISION

### Who You Are
**Nelson** - CO₂ and climate change consultant, primarily assisting businesses with climate strategy and emissions management.

### The Mission
**Offering free, high-quality climate software to have real impact and showcase expertise.** This is both:
1. **Impact-driven:** Help businesses actually address climate change effectively
2. **Marketing/Positioning:** Demonstrate capabilities, build relationships, create consulting opportunities

### Why This Matters - The Problem with Existing Tools
Most climate tools in the market are:
- **Narrowly framed** - Focus on compliance/reporting, not actual change
- **Miss the point** - Don't address real theory of change for companies
- **Avoid key strategies** - Don't focus on target setting and transition strategy
- **Ineffective** - Don't help companies actually prepare for or fight climate change

**Your political/economic insight:** You understand what actually works vs. what just looks good on paper.

### The Solution - What We're Building
**A free, modular climate strategy platform** that focuses on:
- **Target Setting** - Meaningful goals, not just checking boxes
- **Transition Strategy** - Real pathways to change
- **Climate Risk** - Actual risk assessment and preparation
- **CO₂ Management** - Comprehensive emissions tracking and reduction planning

### Maximum Security & Privacy Approach
**Two-layer access system:**
1. **Request Access:** Users provide email → You manually send them the private URL
2. **Anonymous Login:** They create username/password with NO email required
   - Data is never tied to their company
   - Complete anonymity after gaining access
   - Even you don't know which company uses which account

**Why this matters:** Businesses can explore honestly without fear of data leakage or association.

### Modular Architecture Vision
**Multiple interconnected modules (planned):**
- 🎯 **CO₂ Management Module** (current focus) - Emissions tracking, Scope 1/2/3, reduction tactics
- ⚠️ **Climate Risk Module** (future) - Risk assessment and adaptation planning  
- 🚀 **Transition Strategy Module** (future) - Long-term decarbonization pathways
- 🔗 **Cross-module integration** - Same username across all modules, shared data where relevant

### User Journey
1. **Discovery:** Find on your website (newdayclimate.com)
2. **Request Access:** Submit email via form on Squarespace
3. **Receive Access:** You manually send private URL to login page
4. **Anonymous Registration:** Create username/password (no email, no company name required)
5. **Use the Tools:** Access all modules, input data anonymously
6. **Build Trust:** Experience quality → potential consulting relationship

### Where You're Coming From - Technical Background
- **Previous experience:** HTML/CSS code blocks in Squarespace via Claude
- **Current learning:** Full-stack development (frontend, backend, database, APIs, GitHub, Vercel)
- **Approach:** Experimenting to discover what's achievable
- **Philosophy:** Starting simple, building complexity as understanding grows

### Core Requirements - What Success Looks Like
**Visual** - Clean, professional design that looks impressive
**Simple** - Easy to use, intuitive, doesn't overwhelm users  
**Awesome** - Showcases your technical capabilities and strategic thinking
**Free** - No barriers to entry, maximum impact and reach
**Secure** - Absolute privacy and anonymity for users

### Strategic Goals
1. **Have real impact** on climate change by providing effective tools
2. **Demonstrate expertise** through quality software and design
3. **Build relationships** with users who may become consulting clients
4. **Create marketing asset** for promotion on website and LinkedIn
5. **Learn and experiment** with full-stack development
6. **Differentiate from market** by focusing on what actually works

---

## 🎯 PROJECT OVERVIEW (Technical)

**What we're building:** A climate management platform focused on producing systemic social and economic change through political engagement and targeted intervention. This is NOT typical emissions compliance software - it helps organizations understand leverage points in the political/economic system where they can have disproportionate impact on climate action.

**Target users:** Organizations seeking to make real systemic change on climate, not just track emissions for compliance

**Key differentiator:** 
- Privacy-first approach - username-only authentication (no email required)
- Focus on systemic change vs. emissions accounting
- Authentic theory of change vs. greenwashing boilerplate
- Political/economic intervention over incremental improvements

---

## 🏗️ TECHNICAL ARCHITECTURE

### Stack
- **Frontend:** Next.js 15 (App Router), React 19, TypeScript
- **Styling:** Tailwind CSS
- **Database:** PostgreSQL (Neon) via Prisma ORM
- **Authentication:** NextAuth.js with username/password (no OAuth)
- **Hosting:** Vercel (production: https://risk-software.newdayclimate.com)
- **Version Control:** GitHub (repo: knelson-code/carbon-reduction-planner)

### Key Technical Decisions
1. **Username-only auth** (no email) for maximum privacy
2. **PostgreSQL** instead of SQLite (Vercel doesn't support file-based DBs)
3. **Anonymous organization names** (users can name orgs anything)
4. **Manual password recovery** via support email (no automated reset)
5. **Server-side rendering** where possible for performance

---

## 📁 PROJECT STRUCTURE

```
carbon-reduction-planner/
├── app/                          # Next.js App Router pages
│   ├── page.tsx                 # Homepage (landing page)
│   ├── layout.tsx               # Root layout (includes Header/Footer)
│   ├── globals.css              # Global styles & Tailwind
│   ├── login/page.tsx           # Login page
│   ├── register/page.tsx        # Registration page
│   ├── dashboard/
│   │   ├── page.tsx            # Main dashboard (4 module cards)
│   │   ├── climate-risk/
│   │   │   └── page.tsx        # Climate Risk module page
│   │   ├── transition-strategy/
│   │   │   └── page.tsx        # Energy Transition Strategy module page
│   │   ├── impact-strategy/
│   │   │   └── page.tsx        # Systemic Impact module page
│   │   └── co2-management/
│   │       └── page.tsx        # CO₂ Management module page
│   ├── organizations/           # Organization management
│   ├── privacy/page.tsx         # Privacy policy
│   ├── terms/page.tsx           # Terms of service
│   └── support/page.tsx         # Support & password recovery info
├── components/
│   ├── Header.tsx               # Navigation bar (top)
│   ├── Footer.tsx               # Footer with legal links (bottom)
│   ├── Sidebar.tsx              # Collapsible left sidebar navigation
│   └── Providers.tsx            # NextAuth SessionProvider wrapper
├── lib/
│   ├── auth.ts                  # NextAuth configuration
│   └── prisma.ts                # Prisma client singleton
├── prisma/
│   └── schema.prisma            # Database schema (User, Organization models)
└── Documentation/
    ├── DEPLOYMENT_GUIDE.md      # How to deploy changes
    ├── VERCEL_SETUP.md          # Database & environment setup
    ├── STYLE_GUIDELINES.md      # Design system & component rules
    ├── GIT_WORKFLOW.md          # Git basics for beginners
    └── .clinerules              # THIS FILE - Project context
```

---

## 🧩 MODULAR ARCHITECTURE (4 CLIMATE MODULES)

### Dashboard Structure
After login, users see a dashboard with 4 main modules (not organizations):

**1. Understanding Climate Risk**
- Identify and understand risks
- Improve decision-making under uncertainty
- Incorporate insights into processes

**2. Energy Transition Strategy**
- Understand your role in a world affected by climate change
- Determine what you can do to speed up the energy transition
- Decide what you are willing to do

**3. Systemic Impact**
- Build a clear vision of the specific change you are trying to produce
- Identify sensitive intervention points in the political/economic system
- Define the actions that are most likely to produce that impact

**4. CO₂ Management**
- Measure emissions
- Set reduction Targets
- Create detailed reduction plan

### Module Design System
All modules follow a consistent design pattern:

**Dashboard Cards:**
- Grey background (#f5f5f5)
- Dark blue border (#163E64, 1px)
- Orange-tinted shadow (rgba(255, 91, 53, 0.25))
- On hover: Dark navy background (#0B1F32), white text
- Fast 150ms transition
- Contains module title + 3 bullet points (text-xs)

**Module Pages:**
- Colored header bar at top (keeps module identity)
- 3 sub-cards underneath that match dashboard card style exactly
- Same hover behavior, same colors, same spacing
- Module Overview section at bottom with bullet points

**Sidebar Navigation:**
- Ultra-thin collapsed (24px) with vertical text
- Expands to 240px on hover
- Shows module names + expandable sub-items
- Sub-items match the 3 bullet points from dashboard

### Critical Design Philosophy
**NO boilerplate climate language.** This platform focuses on systemic change through political/economic intervention, not typical emissions compliance. Avoid language like:
- ❌ "Net-zero pathways"
- ❌ "Science-based targets"  
- ❌ "Decarbonization roadmaps"
- ❌ Generic sustainability jargon

Instead use authentic framing:
- ✅ "Understand your role"
- ✅ "Speed up the energy transition"
- ✅ "Identify intervention points"
- ✅ "Produce systemic change"

### Footer Philosophy
"Strategic tools for producing systemic social and economic change on climate through political engagement and targeted intervention in key leverage points."

---

## 🎨 DESIGN SYSTEM

### Colors (from STYLE_GUIDELINES.md)
- **Primary Navy:** #163E64 (main text, headings, buttons)
- **Accent Orange:** #FF6B35 (CTAs, highlights)
- **Light Gray:** #F8F9FA (backgrounds)
- **Medium Gray:** #6C757D (secondary text)
- **White:** #FFFFFF (cards, overlays)

### Typography
- **Headings:** Inter font, bold
- **Body:** Inter font, regular
- **Sizes:** Responsive (mobile-first)

### Component Patterns
- **Cards:** White background, subtle shadow, rounded corners
- **Buttons:** Primary (orange), Secondary (navy), consistent padding
- **Forms:** Clean, labeled inputs with validation
- **Spacing:** Consistent 4px grid system

### Critical Design Rules
1. **Always use #163E64 for main text/navy** (not black, not darker blue)
2. **Maintain accessibility** (WCAG AA contrast ratios)
3. **Mobile-first responsive** (test on small screens)
4. **Consistent spacing** (use Tailwind's spacing scale)

---

## 🔐 AUTHENTICATION & DATABASE

### Authentication Flow
1. User registers with **username + password** (no email)
2. Password hashed with bcrypt
3. NextAuth.js manages sessions (JWT tokens)
4. Protected routes redirect to /login if not authenticated
5. No password reset - users contact support@newdayclimate.com

### Database Schema (PostgreSQL)
```prisma
model User {
  id           String         @id @default(cuid())
  username     String         @unique
  password     String
  createdAt    DateTime       @default(now())
  organizations Organization[]
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}
```

### Environment Variables (Vercel)
- `DATABASE_URL` - Neon PostgreSQL connection string
- `NEXTAUTH_SECRET` - Random string for JWT encryption
- `NEXTAUTH_URL` - Production URL (https://risk-software.newdayclimate.com)

---

## 🚀 DEPLOYMENT WORKFLOW

### Standard Practice: Always Commit & Push Immediately
**"Vibe coding in prod"** - After making changes:
1. **Make changes locally** → Edit files in VS Code
2. **Test briefly** → Run `npm run dev` to verify it works
3. **Commit and push immediately** → Don't wait, deploy now
4. **Let Vercel handle it** → Auto-deploys in 1-2 minutes

**This is the standard workflow for ALL changes.** No extensive testing cycles, no long review processes. Make the change, push it live, iterate if needed.

### The Pipeline
1. **Local changes** → Edit files in VS Code
2. **Git commit** → Via VS Code Source Control or command line
3. **Git push** → Pushes to GitHub (main branch)
4. **Vercel auto-deploy** → Detects push, builds, deploys
5. **Live in 1-2 minutes** → Changes appear at production URL

### Critical Files for Deployment
- `package.json` - Dependencies, build scripts
- `next.config.ts` - Next.js configuration
- `prisma/schema.prisma` - Database schema
- `.env` (local only, not committed)

### Database Migrations
- Changes to `schema.prisma` require running `prisma db push` in production
- This is automatic in Vercel via build script

---

## ⚠️ CRITICAL GOTCHAS & RULES

### 1. File-Based Database Won't Work in Production
- **Problem:** Vercel has read-only file systems
- **Solution:** Always use PostgreSQL (Neon), never SQLite in production

### 2. Color Consistency
- **Problem:** Dark blue color was too black
- **Solution:** Always use #163E64 (navy blue) for main text/headings
- **Where to update:** globals.css, component files, anywhere "text-gray-900" or dark blue appears

### 3. Server vs. Client Components
- **Rule:** Use "use client" directive only when needed (interactivity, hooks)
- **Default:** Server components for better performance
- **Common needs for "use client":** useState, useEffect, onClick handlers

### 4. Authentication Routes
- **Public routes:** /, /login, /register, /privacy, /terms, /support
- **Protected routes:** /dashboard, /organizations
- **Redirect logic:** In page components via session checks

### 5. Git Workflow
- **Never commit:** .env files, node_modules, database files
- **Always commit:** package.json changes, schema changes, source code
- **Standard practice:** ALWAYS commit and push after making changes (vibe coding in prod)
- **Use branches:** Only for experimental features (main branch auto-deploys immediately)

**IMPORTANT - Working Git Commands for Cline:**
Due to the directory structure and Windows/Git Bash environment, use this exact command format:
```bash
cd carbon-reduction-planner; git add <file>; git commit -m "message"; git push
```

**Why this works:**
- Semicolons (`;`) chain commands in the same shell session
- `cd carbon-reduction-planner` ensures you're in the right directory
- All git operations happen in sequence without switching contexts

**What DOESN'T work:**
- `cd carbon-reduction-planner && git ...` (fails with "not a git repository")
- `git -C carbon-reduction-planner ...` (inconsistent results)
- `git --git-dir=... --work-tree=...` (fails with "not a git repository")

**Example usage:**
```bash
cd carbon-reduction-planner; git add app/page.tsx; git commit -m "Update homepage styles"; git push
```

### 6. Spacing/Layout Issues
- **Problem:** Hero sections cut off, too much vertical space
- **Solution:** Use min-height instead of fixed height, test at different screen sizes
- **Key files:** app/page.tsx, globals.css

---

## 🔧 COMMON TASKS & HOW TO DO THEM

### Task: Add Sound Effects (Audio Playback)
**Current Implementation:** "Snap sound effect" plays when user closes registration completion modal

**What we learned that WORKS:**
1. **Use base64-encoded audio** embedded directly in component (no external files)
2. **Use Web Audio API** with async/await for reliable playback
3. **Critical:** The base64 format matters - must be a valid audio format (MP3 works)

**Implementation Pattern (Registration snap sound as reference):**
```typescript
// 1. Embed base64 audio at component level
const AUDIO_BASE64 = "//uUZAAAAAAAAAAAAAAAAAAAAAAAAAAAA..." // Full base64 string

// 2. Create async playback function using Web Audio API
const playSoundEffect = async () => {
  try {
    // Create audio context
    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()
    
    // Convert base64 to ArrayBuffer
    const binaryString = atob(AUDIO_BASE64)
    const bytes = new Uint8Array(binaryString.length)
    for (let i = 0; i < binaryString.length; i++) {
      bytes[i] = binaryString.charCodeAt(i)
    }
    
    // Decode and play audio
    const audioBuffer = await audioContext.decodeAudioData(bytes.buffer)
    const source = audioContext.createBufferSource()
    source.buffer = audioBuffer
    source.connect(audioContext.destination)
    source.start(0)
  } catch (error) {
    console.log('Error playing sound:', error)
  }
}

// 3. Call function on user interaction (e.g., button click)
onClick={() => {
  // Do UI stuff first
  setModalOpen(false)
  // Play sound as background effect
  setTimeout(() => playSoundEffect(), 0)
}}
```

**To Add More Sound Effects:**
1. Get audio file (MP3, WAV, etc.)
2. Convert to base64 (use online converter or command line)
3. Test the base64 in a simple HTML file first (see testing pattern below)
4. Once confirmed working, add to component following pattern above
5. Name function descriptively: `playSnapSound()`, `playSuccessSound()`, `playErrorSound()`, etc.

**Testing Pattern (HTML test file):**
```html
<!DOCTYPE html>
<html><body>
<button id="playBtn">Play Sound</button>
<script>
  const base64Audio = "YOUR_BASE64_HERE";
  async function playSound() {
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const binaryString = atob(base64Audio);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      const audioBuffer = await audioContext.decodeAudioData(bytes.buffer);
      const source = audioContext.createBufferSource();
      source.buffer = audioBuffer;
      source.connect(audioContext.destination);
      source.start(0);
    } catch (error) {
      console.error('Error:', error);
    }
  }
  document.getElementById('playBtn').addEventListener('click', playSound);
</script>
</body></html>
```

**What DOESN'T work:**
- ❌ Simple `new Audio()` constructor with base64 - unreliable
- ❌ Callback-based `decodeAudioData()` - prefer async/await
- ❌ External audio files - adds HTTP requests, deployment complexity
- ❌ Truncated base64 strings - must be complete

**Where it's implemented:**
- `app/register/page.tsx` - Snap sound on modal close

**Useful Resources:**
- **Sound Effects Library:** https://pixabay.com/sound-effects/ (free, royalty-free)
  - Finger snap sound: https://pixabay.com/sound-effects/finger-snap-179180/
  - Glass crack sound: https://pixabay.com/sound-effects/glass-crack-363162/
- **Audio to Base64 Converter:** https://base64.guru/converter/encode/audio
- **Testing Base64 Audio Playback:** https://claude.ai/public/artifacts/be77c0a5-0695-4104-8686-f8eddc2dcfe4

### Task: Update Colors Site-Wide
1. Check STYLE_GUIDELINES.md for current color scheme
2. Update globals.css for Tailwind custom colors
3. Search all component files for hardcoded colors
4. Test on both light backgrounds and dark buttons
5. Verify accessibility (contrast ratios)

### Task: Add New Page
1. Create `app/new-page/page.tsx`
2. Add to Header.tsx navigation if needed
3. Add to Footer.tsx if it's a legal page
4. Test routing works locally
5. Push to deploy

### Task: Modify Database Schema
1. Edit `prisma/schema.prisma`
2. Run `npx prisma db push` locally to test
3. Commit and push (Vercel runs migrations automatically)
4. Verify in Neon dashboard that changes applied

### Task: Fix Authentication Issues
1. Check lib/auth.ts for NextAuth config
2. Verify environment variables in Vercel
3. Check app/api/auth/[...nextauth]/route.ts exists
4. Test login flow locally first

### Task: Adjust Spacing/Layout
1. Identify the component file (usually app/page.tsx or component file)
2. Look for Tailwind classes (py-, px-, h-, min-h-, space-y-)
3. Test responsively (mobile, tablet, desktop)
4. Use browser dev tools to inspect actual rendered spacing
5. Adjust incrementally (don't make huge changes at once)

---

## 📚 WHERE TO FIND INFORMATION

### For Design Questions
→ Read `STYLE_GUIDELINES.md` first
→ Check `globals.css` for custom Tailwind config
→ Look at existing components for patterns

### For Deployment/Git Questions
→ Read `GIT_WORKFLOW.md` for basics
→ Read `DEPLOYMENT_GUIDE.md` for detailed process
→ Read `VERCEL_SETUP.md` for environment setup

### For Database Questions
→ Look at `prisma/schema.prisma` for models
→ Check `lib/prisma.ts` for client setup
→ Check `lib/auth.ts` for how auth uses database

### For Authentication Questions
→ Look at `lib/auth.ts` (NextAuth config)
→ Check `app/login/page.tsx` and `app/register/page.tsx`
→ Read DEPLOYMENT_GUIDE.md section on authentication

---

## 🎯 DEVELOPMENT PRINCIPLES

### Standard Workflow (ALWAYS FOLLOW)
1. **Make changes** - Edit files as needed
2. **Test briefly** - Run `npm run dev` to verify it works
3. **Commit and push** - ALWAYS do this immediately after changes
4. **Deploy live** - Vercel auto-deploys, we iterate if needed

**"Vibe coding in prod"** - We don't do extensive testing cycles. Make the change, push it, improve if needed.

### When Making Changes
1. **Always consider the big picture** - How does this affect other parts?
2. **Test locally briefly** - Run `npm run dev` to verify it works
3. **Commit and push immediately** - Don't wait, deploy now (standard practice)
4. **Check existing patterns** - Don't reinvent, follow established patterns
5. **Read the guidelines** - Design system exists for consistency
6. **Think mobile-first** - Always test responsive behavior
7. **Maintain accessibility** - Color contrast, keyboard navigation, etc.

### When Adding Features
1. **Check if it fits the privacy-first approach**
2. **Consider database schema impacts**
3. **Follow existing component patterns**
4. **Add to appropriate documentation file**
5. **Test authentication implications**

### When Fixing Bugs
1. **Understand the root cause** - Don't just patch symptoms
2. **Check if it affects production** - Test deployed version
3. **Consider edge cases** - Empty states, error states, loading states
4. **Update documentation** - If the fix reveals a gotcha

---

## 🚨 RED FLAGS - STOP AND THINK IF...

- **You're about to change authentication** → Verify this won't break existing users
- **You're modifying the database schema** → Consider migration impact
- **You're changing core layout files** → Test all pages, not just one
- **You're adding dependencies** → Check bundle size impact
- **You're hardcoding values** → Should this be in environment variables?
- **You're copy-pasting code** → Should this be a reusable component?
- **You're seeing TypeScript errors** → Don't ignore, fix properly
- **Colors look different than design** → Double-check hex codes

---

## 💡 PROJECT GOALS & CONTEXT

### Why We Built This
- Help organizations track carbon reduction efforts
- Make sustainability planning accessible
- Provide privacy-first alternative to enterprise tools
- Enable tactical planning with timelines and costs

### Future Features (Potential)
- PDF report exports
- Data visualization charts
- Multi-user organizations
- Integration with carbon calculators
- Mobile app version

### User Journey
1. Visit homepage → Learn about the tool
2. Register → Create account with username
3. Dashboard → View organizations
4. Create organization → Set up emissions tracking
5. Add tactics → Plan reduction strategies
6. Visualize progress → See projected vs. actual

---

## 🔍 HOW TO USE THIS FILE

**Cline automatically reads this file at the start of every task.** You don't need to do anything special - just start a new task, and I'll have this context.

**If you need to update this file:**
1. Open `.clinerules`
2. Edit the relevant section
3. Save and commit
4. Next task will use updated context

**Sections to update regularly:**
- Recent gotchas you discover
- New features added
- Changes to design system
- New critical rules

---

## ✅ CHECKLIST FOR NEW TASKS

When starting work on a task, verify:
- [ ] I understand the project structure
- [ ] I know which files to modify
- [ ] I've checked STYLE_GUIDELINES.md if design-related
- [ ] I know the deployment process
- [ ] I understand the authentication flow
- [ ] I'm using the correct colors (#163E64 for navy)
- [ ] I'll test locally before pushing
- [ ] I understand how this affects the big picture

---

**Last Updated:** October 2025
**Project Status:** Live in production, actively maintained
**Production URL:** https://risk-software.newdayclimate.com
**User:** Nelson, using Cline + Claude Sonnet for development
